// Generated by CoffeeScript 1.7.1
var __slice = [].slice;

module.exports = function() {
  var chai;
  global.Driver = require('selenium-webdriver');
  global._ = require('lodash');
  global.$ = Driver.promise;
  Object.defineProperties(Object.prototype, {
    includes: {
      value: function(mixin) {
        _.extend(this, mixin);
        _.extend(this.prototype, mixin.prototype);
        return this;
      }
    },
    getter: {
      value: function(object, property, getter) {
        var _ref;
        if (!getter) {
          _ref = [this.prototype, object, property], object = _ref[0], property = _ref[1], getter = _ref[2];
        }
        return Object.defineProperty(object, property, {
          configurable: true,
          get: getter
        });
      }
    },
    setter: {
      value: function(object, property, setter) {
        var getter, _ref;
        if (!setter) {
          _ref = [this.prototype, object, property], object = _ref[0], property = _ref[1], getter = _ref[2];
        }
        return Object.defineProperty(object, property, {
          configurable: true,
          set: getter
        });
      }
    },
    accessor: {
      value: function(object, property) {
        var _ref;
        if (!property) {
          _ref = [this.prototype, object], object = _ref[0], property = _ref[1];
        }
        return Object.defineProperty(object, property, {
          configurable: true,
          get: function() {
            return this["_" + property];
          },
          set: function(v) {
            return this["_" + property] = v;
          }
        });
      }
    }
  });
  chai = require('chai');
  chai.use(require('chai-as-promised'));
  chai.should();
  Object.defineProperty($.Promise.prototype, 'should', {
    get: Object.prototype.__lookupGetter__('should')
  });
  Object.defineProperties(Object.prototype, {
    $: {
      value: function() {
        var args, deferred, fn, _ref;
        fn = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        deferred = $.defer();
        (_ref = (_.isFunction(fn) ? fn : this[fn])).call.apply(_ref, [this].concat(__slice.call(args), [function() {
          var error, results;
          error = arguments[0], results = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
          if (error) {
            return deferred.reject(error);
          } else {
            return deferred.fulfill.apply(deferred, results);
          }
        }]));
        return deferred.promise;
      }
    }
  });
  if (process.env.CHROMEDRIVER_PORT) {
    return require('../node_modules/selenium-webdriver/chrome').ServiceBuilder.prototype.port_ = process.env.CHROMEDRIVER_PORT;
  }
};
